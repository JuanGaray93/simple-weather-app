{"version":3,"file":"index.0c40555e.js","sources":["../../vite/modulepreload-polyfill","../../src/model/openWeather.ts","../../src/CitySelect.tsx","../../src/helpers/dateHelpers.ts","../../src/CityForecastDetail/DailyCityForecast.tsx","../../src/CityForecastDetail/CityForecastDetail.tsx","../../src/model/app.ts","../../src/requests.ts","../../src/App.tsx","../../src/main.tsx"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","export interface Coordinates {\n  lat: number;\n  lon: number;\n}\n\nexport enum CityId {\n  Glew = \"3433762\",\n  Boulogne = \"3435971\",\n  Caba = \"3433955\",\n  SaoPaulo = \"3448439\",\n  SanFernando = \"3429095\",\n}\n\nexport const isCityId = (val: unknown): val is CityId =>\n  Object.values(CityId).includes(val as CityId);\n\nexport const cityIdToName: Record<CityId, string> = {\n  [CityId.Glew]: \"Glew\",\n  [CityId.Boulogne]: \"Boulogne Sur Mer\",\n  [CityId.Caba]: \"Ciudad Autónoma de Buenos Aires\",\n  [CityId.SanFernando]: \"San Fernando\",\n  [CityId.SaoPaulo]: \"São Paulo\",\n};\n\nexport const cityIdToCoordinates: Record<CityId, Coordinates> = {\n  [CityId.Glew]: { lon: -58.37764, lat: -34.89151 },\n  [CityId.Boulogne]: { lon: -58.565811, lat: -34.50732 },\n  [CityId.Caba]: { lon: -58.450001, lat: -34.599998 },\n  [CityId.SanFernando]: { lon: -58.56279, lat: -34.44104 },\n  [CityId.SaoPaulo]: { lon: -46.636108, lat: -23.547501 },\n};\n\n// https://openweathermap.org/weather-conditions#Weather-Condition-Codes-2\nexport const getWeatherTextById = (id: number): string => {\n  if(200 <= id && id <= 299 ) return \"Tormenta\";\n  if(300 <= id && id <= 399 ) return \"Lluvia ligera\";\n  if(500 <= id && id <= 599 ) return \"Lluvia\";\n  if(600 <= id && id <= 699 ) return \"Nieve\";\n  if(801 <= id && id <= 809 ) return \"Nublado\";\n  // Special cases\n  if(id === 800 ) return \"Despejado\";\n  if(id === 701) return \"Niebla\";\n  if(id === 711) return \"Humo\";\n  if(id === 721) return \"Bruma\";\n  if(id === 731 || id === 761) return \"Polvo\";\n  if(id === 741) return \"Niebla espesa\";\n  if(id === 751) return \"Arena\";\n  if(id === 771) return \"Vendaval\";\n  if(id === 781) return \"Tornado\";\n  return \"\";\n};\n\ninterface Weather {\n  id: number;\n  icon: string;\n}\n\nexport interface DayWeatherForecast {\n  weather: Weather[];\n  temp: {\n    day: number;\n    min: number;\n    max: number;\n  };\n  dt: number;\n}\n\ninterface DayCurrentWeather {\n  weather: Weather[];\n  temp: number;\n}\n\nexport interface CityForecast {\n  lat: number;\n  lon: number;\n  current: DayCurrentWeather;\n  daily: DayWeatherForecast[];\n}\n","import React from \"react\";\nimport { CityId, cityIdToName, isCityId } from \"./model/openWeather\";\n\nexport type CityOption = CityId | \"\";\n\n\nconst eventValueToCityId = (newValue: string): CityId | undefined => {\n  if (isCityId(newValue)) return newValue;\n  return undefined;\n};\n\nconst getCityIdAndName = (cityId: CityId | \"\") => [\n  cityId,\n  isCityId(cityId) ? cityIdToName[cityId] : \"Ciudad actual\",\n];\n\ninterface Props {\n  options: CityOption[];\n  currCity: CityOption;\n  onChangeCity: (city: CityOption) => void;\n  loading: boolean;\n  className?: string;\n}\n\nexport const CitySelect: React.FC<Props> = ({\n  options,\n  currCity,\n  onChangeCity,\n  loading,\n  className\n}) => {\n  return (\n    <select\n      value={currCity}\n      onChange={(e) => onChangeCity(eventValueToCityId(e.target.value) ?? \"\")}\n      name=\"cities\"\n      disabled={loading}\n      className={className}\n    >\n      {options.map(getCityIdAndName).map(([value, cityName]) => {\n        return (\n          <option key={value} value={value}>\n            {cityName}\n          </option>\n        );\n      })}\n    </select>\n  );\n};\n","export const buildLocalDateByUnixTimestamp = (\n  unixTimestamp: number\n): string => {\n  /* Unix timestamp comes as a number of seconds.\n   * Date() receives a number of milliseconds\n   */\n  const date = new Date(unixTimestamp * 1000);\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#to_get_date_month_and_year_or_time\n  const [month, day, year] = [\n    date.getMonth() + 1,\n    date.getDate(),\n    date.getFullYear(),\n  ];\n  return `${day}/${month}/${year}`;\n};\n","import React from \"react\";\n\ninterface Props {\n  day: string;\n  temp: number;\n  iconId: string;\n  weatherDescription: string;\n}\n\nexport const DailyCityForecast: React.FC<Props> = ({ day, temp, iconId, weatherDescription }) => {\n  return (\n    <article className=\"bg-transparentBlack p-4 w-40 h-48 flex flex-col justify-center text-white\">\n      <h3>{day}</h3>\n      <p>{temp}°C</p>\n      <p>{weatherDescription}</p>\n      <img src={`http://openweathermap.org/img/wn/${iconId}@2x.png`} title={weatherDescription} alt={weatherDescription} />\n    </article>\n  );\n};\n","import React from \"react\";\nimport { buildLocalDateByUnixTimestamp } from \"../helpers/dateHelpers\";\nimport { CityForecast, getWeatherTextById } from \"../model/openWeather\";\nimport { DailyCityForecast } from \"./DailyCityForecast\";\n\ninterface Props {\n  forecast: CityForecast;\n}\n\nexport const CityForecastDetail: React.FC<Props> = ({ forecast }) => {\n  return (\n    <ol className=\"flex flex-wrap flex-row gap-10\">\n      <li>\n        <DailyCityForecast\n          weatherDescription={getWeatherTextById(forecast.current.weather[0].id)}\n          day=\"Hoy\"\n          iconId={forecast.current.weather[0].icon}\n          temp={forecast.current.temp}\n        />\n      </li>\n      {forecast.daily.map((df, index) => {\n        return (\n          <li key={index}>\n            <DailyCityForecast\n              weatherDescription={getWeatherTextById(df.weather[0].id)}\n              day={buildLocalDateByUnixTimestamp(df.dt)}\n              iconId={df.weather[0].icon}\n              temp={df.temp.day}\n            />\n          </li>\n        );\n      })}\n    </ol>\n  );\n};\n","import { CityForecast, CityId, Coordinates } from \"./openWeather\";\n\nexport enum AppError {\n  NoPermissions,\n  FetchingError,\n}\n\nexport const errorToStr: Record<AppError, string> = {\n  [AppError.FetchingError]:\n    \"Ocurrió un error al obtener el pronóstico. Inténtelo de nuevo.\",\n  [AppError.NoPermissions]: \"La aplicación necesita acceder a su ubicación. Revise los permisos de la página e intente de nuevo.\",\n};\n\nexport type LocationIdentifier = CityId | Coordinates;\n\nexport const locationIdentifierIsCoordinates = (\n  li: LocationIdentifier\n): li is Coordinates => typeof li === \"object\";\n\nexport type AppState = {\n  error?: AppError;\n  userLocation?: Coordinates;\n  currCityId?: CityId;\n  fetchedCity?: CityForecast;\n};\n","import {\n  locationIdentifierIsCoordinates,\n  LocationIdentifier,\n} from \"./model/app\";\nimport {\n  CityForecast,\n  cityIdToCoordinates,\n  Coordinates,\n} from \"./model/openWeather\";\n\nconst castStringEnvVarToStr = (envVar?: string | boolean) => {\n  if (typeof envVar === \"boolean\") return \"\";\n  return envVar ?? \"\";\n};\n\nconst API_KEY: string = castStringEnvVarToStr(import.meta.env.VITE_WEATHER_API_KEY);\nconst FORECAST_DAYS = 5;\nconst BASE_OPENWEATHER_URL =\n  \"https://api.openweathermap.org/data/2.5/onecall?exclude=minutely,hourly,alerts&units=metric\";\n\n/* Read about the open weather API here:\n *  https://openweathermap.org/api/one-call-api#how\n */\n\ntype OpenWeatherCoordinatesUrlParams = Coordinates & {\n  count: number; // from 1 to 16\n  appId: string;\n};\nconst buildOpenWeatherGeographicCoordinatesUrl = (\n  params: OpenWeatherCoordinatesUrlParams\n): string =>\n  `${BASE_OPENWEATHER_URL}&lat=${params.lat}&lon=${params.lon}&cnt=${params.count}&appid=${params.appId}`;\n\nconst buildRequestParamByLocation = (location: LocationIdentifier): string => {\n  const coords = locationIdentifierIsCoordinates(location)\n    ? location\n    : cityIdToCoordinates[location];\n  return buildOpenWeatherGeographicCoordinatesUrl({\n    appId: API_KEY,\n    count: FORECAST_DAYS,\n    ...coords,\n  });\n};\n\n/** @todo */\nexport const getLocationForecast = async (\n  params: LocationIdentifier\n): Promise<CityForecast> => {\n  const requestUrl: string = buildRequestParamByLocation(params);\n  const res = await fetch(requestUrl);\n  if (res.ok) return res.json();\n  throw new Error();\n};\n","import React, { useEffect, useState } from \"react\";\nimport { CityOption, CitySelect } from \"./CitySelect\";\nimport { CityForecastDetail } from \"./CityForecastDetail/CityForecastDetail\";\nimport { AppError, AppState, errorToStr } from \"./model/app\";\nimport { CityId } from \"./model/openWeather\";\nimport { getLocationForecast } from \"./requests\";\n\nconst cityOptions: CityOption[] = [\"\", ...Object.values(CityId)];\n\nexport const App: React.FC = () => {\n  const [state, setState] = useState<AppState>({});\n  const [selectedCity, setSelectedCity] = useState<CityOption>(\"\");\n  const isLoading = state.fetchedCity === undefined;\n\n  const loadCity = async (newCity?: CityId) => {\n    setState((state) => ({\n      ...state,\n      fetchedCity: undefined,\n    }));\n    const location = newCity ?? state.userLocation;\n    try {\n      if (!location) return;\n      const newCityData = await getLocationForecast(location);\n      setState((state) => ({\n        ...state,\n        fetchedCity: newCityData,\n        currCityId: newCity,\n        error: undefined,\n      }));\n    } catch (error) {\n      setState((state) => ({\n        ...state,\n        fetchedCity: undefined,\n        currCityId: undefined,\n        error: AppError.FetchingError,\n      }));\n    }\n  };\n\n  useEffect(() => {\n    if (state.userLocation === undefined)\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          setState((state) => ({\n            ...state,\n            userLocation: {\n              lat: position.coords.latitude,\n              lon: position.coords.longitude,\n            },\n          }));\n        },\n        () => {\n          setState((state) => ({ ...state, error: AppError.NoPermissions }));\n        }\n      );\n    loadCity(selectedCity || undefined);\n  }, [state.userLocation?.lat, state.userLocation?.lon, selectedCity]);\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-lavenderWeb \">\n      <h1 className=\"h-20 text-5xl bg-queenPink p-4\">Weather</h1>\n      <main className=\"p-4\">\n        <section>\n          <CitySelect\n            options={cityOptions}\n            currCity={selectedCity}\n            onChangeCity={(newCity) => setSelectedCity(newCity)}\n            loading={isLoading}\n            className=\"my-4\"\n          />\n          {state.error !== undefined ? (\n            <p className=\"text-red\">{errorToStr[state.error]}</p>\n          ) : null}\n        </section>\n        <section>\n          {isLoading && state.error === undefined && <p>Cargando...</p>}\n          {state.fetchedCity && (\n            <CityForecastDetail forecast={state.fetchedCity} />\n          )}\n        </section>\n      </main>\n    </div>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport \"tailwindcss/tailwind.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"names":["relList","document","createElement","supports","link","querySelectorAll","MutationObserver","mutations","mutation","type","node","addedNodes","tagName","rel","observe","childList","subtree","ep","fetchOpts","script","integrity","referrerpolicy","referrerPolicy","crossorigin","credentials","getFetchOpts","href","p","CityId","CityId2","isCityId","val","Object","values","includes","cityIdToName","Glew","Boulogne","Caba","SanFernando","SaoPaulo","cityIdToCoordinates","lon","lat","getWeatherTextById","id","getCityIdAndName","cityId","CitySelect","options","currCity","onChangeCity","loading","className","value","onChange","e","newValue","target","name","disabled","map","cityName","key","buildLocalDateByUnixTimestamp","unixTimestamp","date","Date","month","day","year","getMonth","getDate","getFullYear","DailyCityForecast","temp","iconId","weatherDescription","src","title","alt","CityForecastDetail","forecast","current","weather","icon","daily","df","index2","dt","AppError","AppError2","errorToStr","API_KEY","envVar","getLocationForecast","async","params","requestUrl","location","__spreadValues","appId","count","buildRequestParamByLocation","res","fetch","ok","json","Error","cityOptions","App","state","setState","useState","selectedCity","setSelectedCity","isLoading","fetchedCity","userLocation","geolocation","getCurrentPosition","position","state2","coords","latitude","longitude","error","NoPermissions","newCity","newCityData","currCityId","FetchingError","ReactDOM","render","React","StrictMode","getElementById"],"mappings":"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"}